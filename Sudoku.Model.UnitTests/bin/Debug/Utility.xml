<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utility</name>
    </assembly>
    <members>
        <member name="T:Utility.Duad">
            <summary>
            2D structure to identify location in a Sudoku puzzle grid
            </summary>
        </member>
        <member name="F:Utility.Duad.Row">
            <summary>
            Vertical grouping
            </summary>
        </member>
        <member name="F:Utility.Duad.Column">
            <summary>
            Horizontal grouping
            </summary>
        </member>
        <member name="M:Utility.Duad.#ctor(System.Int32,System.Int32)">
            <summary>
            2D structure to identify location in a Sudoku puzzle grid
            </summary>
            <param name="row">Vertical grouping</param>
            <param name="column">Horizontal grouping</param>
        </member>
        <member name="M:Utility.Duad.ToString">
            <summary>
            Short text representation of this Duad
            </summary>
            <returns>Simple 2D coordinate set</returns>
        </member>
        <member name="T:Utility.DuadF">
            <summary>
            2D structure to identify location in a Sudoku puzzle grid
            </summary>
        </member>
        <member name="F:Utility.DuadF.Row">
            <summary>
            Vertical grouping
            </summary>
        </member>
        <member name="F:Utility.DuadF.Column">
            <summary>
            Horizontal grouping
            </summary>
        </member>
        <member name="M:Utility.DuadF.#ctor(System.Single,System.Single)">
            <summary>
            2D structure to identify location in a Sudoku puzzle grid
            </summary>
            <param name="row">Vertical grouping</param>
            <param name="column">Horizontal grouping</param>
        </member>
        <member name="M:Utility.DuadF.ToString">
            <summary>
            Short text representation of this DuadF
            </summary>
            <returns>Simple 2D coordinate set</returns>
        </member>
        <member name="T:Utility.Move">
            <summary>
            3D structure to identify potential move in a Sudoku puzzle
            </summary>
        </member>
        <member name="F:Utility.Move.Row">
            <summary>
            Vertical grouping
            </summary>
        </member>
        <member name="F:Utility.Move.Column">
            <summary>
            Horizontal grouping
            </summary>
        </member>
        <member name="F:Utility.Move.Value">
            <summary>
            Solution for the Cell
            </summary>
        </member>
        <member name="F:Utility.Move.Kind">
            <summary>
            Classification of type of Move
            </summary>
        </member>
        <member name="M:Utility.Move.#ctor(System.Int32,System.Int32,System.Char,Utility.MoveType)">
            <summary>
            3D structure to identify location in a Sudoku puzzle grid
            </summary>
            <param name="row">Vertical grouping</param>
            <param name="column">Horizontal grouping</param>
            <param name="value">Solution for the Cell</param>
            <param name="kind">Classification of type of Move</param>
        </member>
        <member name="M:Utility.Move.ToString">
            <summary>
            Short text representation of this Move
            </summary>
            <returns>Simple 3D coordinate set</returns>
        </member>
        <member name="T:Utility.MoveType">
            <summary>
            Classification of type of Move
            </summary>
        </member>
        <member name="F:Utility.MoveType.Solution">
            <summary>
            This Move solves a Cell
            </summary>
        </member>
        <member name="F:Utility.MoveType.Disqualification">
            <summary>
            This Move disqualifies a potential solution for a Cell
            </summary>
        </member>
        <member name="T:Utility.Util">
            <summary>
            Sharable code
            </summary>
        </member>
        <member name="M:Utility.Util.IsPerfectSquare(System.Int32,System.Int32@)">
            <summary>
            Determine if given parameter is a perfect square
            </summary>
            <param name="source">Value to be tested</param>
            <param name="squareRoot">Square root of source, if source is a perfect square</param>
            <returns></returns>
        </member>
        <member name="M:Utility.Util.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Recursive algorithm to return all combinations of k elements from n
            </summary>
            <remarks>http://stackoverflow.com/questions/127704/algorithm-to-return-all-combinations-of-k-elements-from-n</remarks>
            <remarks>Based on algorithm posted publicly by user230950</remarks>
            <typeparam name="T">Type of elements in the collection</typeparam>
            <param name="elements">Collection to be grouped</param>
            <param name="k">Number of elements in each group</param>
            <returns>Array of arrays of matched sets</returns>
        </member>
        <member name="M:Utility.Util.PointFromDuad(Utility.Duad)">
            <summary>
            Swap coordinates from Duad(Row, Column) to Point(X, Y) - opposite order
            </summary>
            <param name="source">2D structure in Duad format</param>
            <returns>Corresponding 2D structure in Point format</returns>
        </member>
        <member name="M:Utility.Util.PointFFromDuadF(Utility.DuadF)">
            <summary>
            Swap coordinates from DuadF(Row, Column) to PointF(X, Y) - opposite order
            </summary>
            <param name="source">2D structure in Duad format</param>
            <returns>Corresponding 2D structure in Point format</returns>
        </member>
        <member name="M:Utility.Util.IntFromFP(System.Single)">
            <summary>
            Determine closest int that approximates a floating-point value
            </summary>
            <param name="source">Original floating-point value</param>
            <returns>Closest integral equivalent</returns>
        </member>
        <member name="M:Utility.Util.IntFromFP(System.Double)">
            <summary>
            Determine closest int that approximates a floating-point value
            </summary>
            <param name="source">Original floating-point value</param>
            <returns>Closest integral equivalent</returns>
        </member>
        <member name="M:Utility.Util.StringToCharArray(System.String)">
            <summary>
            Convert string representation of a one-dimensional char array to the equivalent square char array
            </summary>
            <param name="source">Data represented as a single string</param>
            <returns>Two-dimensional char array</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameter value is not a perfect square</exception>
        </member>
        <member name="M:Utility.Util.ScrambleChars(System.Char[0:,0:],System.Char)">
            <summary>
            Randomly mix characters appearing in a 2-dimensional char array
            </summary>
            <param name="source">Original two-dimensional character array</param>
            <param name="locked">Locations containing this char will not be changed</param>
            <returns>Two-dimensional char array with swapped values in same locations</returns>
        </member>
        <member name="M:Utility.Util.FlipHorizontal(System.Char[0:,0:])">
            <summary>
            Swap columns (the 2nd dimension) of a 2-dimensional char array
            </summary>
            <param name="source">Original two-dimensional character array</param>
            <returns>Two-dimensional char array in mirror image</returns>
        </member>
        <member name="M:Utility.Util.FlipVertical(System.Char[0:,0:])">
            <summary>
            Swap rows (the 1st dimension) of a 2-dimensional char array
            </summary>
            <param name="source">Original two-dimensional character array</param>
            <returns>Two-dimensional char array in mirror image</returns>
        </member>
        <member name="M:Utility.Util.RotateClockwise(System.Char[0:,0:],System.Int32)">
            <summary>
            Turn a 2-dimensional char array about its center
            </summary>
            <param name="source">Original two-dimensional character array</param>
            <param name="quadrants">Number of 90째 turns to take: 1=> 90째 CW, 2=> 180째, -1=> 90째 CCW</param>
            <returns>Rotated two-dimensional char array</returns>
        </member>
        <member name="M:Utility.Util.RandomizeArray(System.Char[0:,0:],System.Char)">
            <summary>
            Randomly shuffle a 2-dimensional char array
            </summary>
            <param name="source">Original two-dimensional character array</param>
            <param name="locked">Locations containing this char will not be changed</param>
            <returns>Two-dimensional char array with values shuffled and puzzle rotated randomly</returns>
        </member>
        <member name="T:Utility.Triad">
            <summary>
            3D structure to identify location in a Sudoku puzzle grid
            </summary>
        </member>
        <member name="F:Utility.Triad.Row">
            <summary>
            Vertical grouping
            </summary>
        </member>
        <member name="F:Utility.Triad.Column">
            <summary>
            Horizontal grouping
            </summary>
        </member>
        <member name="F:Utility.Triad.HintZone">
            <summary>
            Central zone identity
            </summary>
        </member>
        <member name="M:Utility.Triad.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            3D structure to identify location in a Sudoku puzzle grid
            </summary>
            <param name="row">Vertical grouping</param>
            <param name="column">Horizontal grouping</param>
            <param name="hintZone">Central zone identity</param>
        </member>
        <member name="M:Utility.Triad.ToString">
            <summary>
            Short text representation of this Triad
            </summary>
            <returns>Simple 3D coordinate set</returns>
        </member>
        <member name="M:Utility.Triad.ToString(System.Int32)">
            <summary>
            Short text representation of this Triad
            </summary>
            <param name="excludeHint">If HintZone equals this value, do not include it</param>
            <returns>Text representation</returns>
        </member>
    </members>
</doc>
