<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku.Model</name>
    </assembly>
    <members>
        <member name="T:Sudoku.Model.Cell">
            <summary>
            Individual Sudoku location on game grid
            </summary>
        </member>
        <member name="F:Sudoku.Model.Cell.valueWhenUnsolved">
            <summary>
            Value that represents a Cell that has not yet been solved
            </summary>
        </member>
        <member name="M:Sudoku.Model.Cell.#ctor(System.Char,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Individual Sudoku location
            </summary>
            <param name="minValue">Smallest legal value for this cell; default 1 for standard Sudoku puzzle</param>
            <param name="numValues">Quantity of legal values for this cell; default 9 for standard Sudoku puzzle</param>
            <param name="row">Vertical location in Sudoku puzzle grid</param>
            <param name="column">Horizontal location in Sudoku puzzle grid</param>
            <param name="region">Square zone location in Sudoku puzzle grid</param>
        </member>
        <member name="M:Sudoku.Model.Cell.#ctor(System.Char,System.Char,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Individual Sudoku location
            </summary>
            <param name="value">Pre-known solution for this Cell</param>
            <param name="minValue">Smallest legal value for this cell; default 1 for standard Sudoku puzzle</param>
            <param name="numValues">Quantity of legal values for this cell; default 9 for standard Sudoku puzzle</param>
            <param name="row">Vertical location in Sudoku puzzle grid</param>
            <param name="column">Horizontal location in Sudoku puzzle grid</param>
            <param name="region">Square zone location in Sudoku puzzle grid</param>
        </member>
        <member name="M:Sudoku.Model.Cell.IsPotentialSolution(System.Char)">
            <summary>
            Determine if a potential solution value is still possible
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="value">Value to check</param>
        </member>
        <member name="M:Sudoku.Model.Cell.Disqualify(System.Char)">
            <summary>
            Remove a potential solution value from consideration
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="value">Value to exclude from consideration</param>
        </member>
        <member name="M:Sudoku.Model.Cell.AddScratch(System.Int32)">
            <summary>
            Identify a particular location as a potential solution location (not declaring so, just "guessing")
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="index">Zero-based index of location to say "maybe"</param>
        </member>
        <member name="M:Sudoku.Model.Cell.AddScratch(System.Char)">
            <summary>
            Identify a particular value as a potential solution (not declaring so, just "guessing")
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="value">Value to say "maybe"</param>
        </member>
        <member name="M:Sudoku.Model.Cell.RemoveScratch(System.Int32)">
            <summary>
            Identify a particular location as unlikely as a potential solution location (not declaring, just "guessing")
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="index">Zero-based index of location to say "probably not"</param>
        </member>
        <member name="M:Sudoku.Model.Cell.RemoveScratch(System.Char)">
            <summary>
            Identify a particular value as unlikely as a potential solution (not declaring, just "guessing")
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="value">Value to say "probably not"</param>
        </member>
        <member name="M:Sudoku.Model.Cell.Set(System.Char)">
            <summary>
            Enter the solution to this Cell
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when all possible solutions have been disqualified</exception>
            <exception cref="T:System.ApplicationException">Thrown when argument has been previously disqualified</exception>
            <param name="value">Correct value for this Cell</param>
        </member>
        <member name="M:Sudoku.Model.Cell.ValueAtIndex(System.Int32)">
            <summary>
            Identify the sole potential value that could be valid at the given location
            </summary>
            /// <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="index">Zero-based index of value</param>
            <returns>Value that could be legal at this index</returns>
        </member>
        <member name="M:Sudoku.Model.Cell.IndexOfValue(System.Char)">
            <summary>
            Identify the index where a specified value will be legal
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when argument is too small or too large</exception>
            <param name="value">Value that could be a solution for this Cell</param>
            <returns>Zero-based index where value might be legal</returns>
        </member>
        <member name="M:Sudoku.Model.Cell.ToString">
            <summary>
            Text representation of this Cell
            </summary>
            <returns>Solution if solved, valueWhenUnsolved if not solved</returns>
        </member>
        <member name="P:Sudoku.Model.Cell.CurrentValue">
            <summary>
            Solution, if applicable, or valueWhenUnsolved if not solved yet
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.Row">
            <summary>
            Vertical location in Sudoku puzzle grid
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.Column">
            <summary>
            Horizontal location in Sudoku puzzle grid
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.Region">
            <summary>
            Square zone location in Sudoku puzzle grid
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.MinValue">
            <summary>
            Smallest legal value for this cell
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.MaxValue">
            <summary>
            Largest legal value for this cell
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.IsSolved">
            <summary>
            Determine if a unique solution has been determined
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.Solvable">
            <summary>
            Whether this cell still has hope of being solved
            (makes no claim regarding full game solvability)
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.Status">
            <summary>
            Measure of source (and therefore certainty) of answer
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.RemainingPossibilities">
            <summary>
            Ordered list of values this Cell can contain
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.Domain">
            <summary>
            Ordered list representation of all possibilities, including disqualified ones
            </summary>
        </member>
        <member name="P:Sudoku.Model.Cell.ScratchPad">
            <summary>
            Ordered list representation of potential value guesses, initially all off.
            </summary>
        </member>
        <member name="T:Sudoku.Model.Game">
            <summary>
            Two-dimensional array representing a Sudoku puzzle
            </summary>
        </member>
        <member name="F:Sudoku.Model.Game.MinDimensionValue">
            <summary>
            Smallest square grid dimension allowed
            </summary>
        </member>
        <member name="F:Sudoku.Model.Game.MaxDimensionValue">
            <summary>
            Largest square grid dimension allowed (Compiled value can be edited)
            </summary>
        </member>
        <member name="M:Sudoku.Model.Game.#ctor(System.Char,System.Int32)">
            <summary>
            Two-dimensional array representing a Sudoku puzzle
            </summary>
            <param name="firstValue">First value of each Cell in the Game</param>
            <param name="sideLength">Number of rows / columns / regions in the Game and of values in each Cell;
              default 9 for standard Sudoku puzzle
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when sideLength parameter is illegally large or small</exception>
            <exception cref="T:System.ArgumentException">Thrown when sideLength parameter is not a perfect square</exception>
        </member>
        <member name="M:Sudoku.Model.Game.#ctor(System.Char,System.Int32,System.Char[0:,0:])">
            <summary>
            Two-dimensional array representing a Sudoku puzzle
            </summary>
            <param name="firstValue">First value possible for each Cell in the Game</param>
            <param name="sideLength">Number of rows / columns / regions in the Game and of values in each Cell</param>
            <param name="initialValues">Array of values representing pre-solved Cells</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when sideLength parameter is illegally large or small</exception>
            <exception cref="T:System.ArgumentException">Thrown when sideLength parameter is not a perfect square</exception>
            <exception cref="T:System.ArgumentException">Thrown when the size of parameter initialValues conflicts with parameter sideLength</exception>
            <exception cref="T:System.ArgumentException">Thrown when a value in initialValues cannot be configured due to conflict with other values</exception>
        </member>
        <member name="M:Sudoku.Model.Game.IdentifyRegion(System.Int32,System.Int32)">
            <summary>
            Determine region containing a given Cell location
            </summary>
            <param name="rowNumber">Row to be matched</param>
            <param name="columnNumber">Column to be matched</param>
            <returns>Corresponding region number</returns>
        </member>
        <member name="M:Sudoku.Model.Game.LocationsInRegion(System.Int32)">
            <summary>
            Determine Cell locations for a given Region
            </summary>
            <param name="regionNumber">Region to be matched</param>
            <returns>List of Cell locations</returns>
        </member>
        <member name="M:Sudoku.Model.Game.CellsByRow(System.Int32)">
            <summary>
            Find subset of Cells in a specified row
            </summary>
            <param name="rowNumber">Row to be matched</param>
            <returns>Cells in one row</returns>
        </member>
        <member name="M:Sudoku.Model.Game.CellsByColumn(System.Int32)">
            <summary>
            Find subset of Cells in a specified column
            </summary>
            <param name="columnNumber">Column to be matched</param>
            <returns>Cells in one column</returns>
        </member>
        <member name="M:Sudoku.Model.Game.CellsByRegion(System.Int32)">
            <summary>
            Find subset of Cells in a specified region
            </summary>
            <param name="regionNumber">Region to be matched</param>
            <returns>Cells in one region</returns>
        </member>
        <member name="M:Sudoku.Model.Game.RowsIntersectingRegion(System.Int32)">
            <summary>
            Identify rows that cross a given region
            </summary>
            <param name="region">Region to be matched</param>
            <returns>Rows crossing the region</returns>
        </member>
        <member name="M:Sudoku.Model.Game.RowRegionIntersection(System.Int32,System.Int32)">
            <summary>
            Identify the intersection of a specified row and region
            </summary>
            <param name="row">Row to be matched</param>
            <param name="region">Region to be matched</param>
            <returns>Subset of the Game representing the intersection</returns>
        </member>
        <member name="M:Sudoku.Model.Game.RowExcludeRegion(System.Int32,System.Int32)">
            <summary>
            Identify Cells beyond the intersection of a specified row and region
            </summary>
            <param name="row">Row to be matched</param>
            <param name="region">Region to be excluded</param>
            <returns>Subset of the Game representing the excluded Cells</returns>
        </member>
        <member name="M:Sudoku.Model.Game.RegionExcludeRow(System.Int32,System.Int32)">
            <summary>
            Identify Cells beyond the intersection of a specified row and region
            </summary>
            <param name="row">Row to be excluded</param>
            <param name="region">Region to be matched</param>
            <returns>Subset of the Game representing the excluded Cells</returns>
        </member>
        <member name="M:Sudoku.Model.Game.ColumnsIntersectingRegion(System.Int32)">
            <summary>
            Identify columns that cross a given region
            </summary>
            <param name="region">Region to be matched</param>
            <returns>Columns crossing the region</returns>
        </member>
        <member name="M:Sudoku.Model.Game.ColumnRegionIntersection(System.Int32,System.Int32)">
            <summary>
            Identify the intersection of a specified column and region
            </summary>
            <param name="column">Column to be matched</param>
            <param name="region">Region to be matched</param>
            <returns>Subset of the Game representing the intersection</returns>
        </member>
        <member name="M:Sudoku.Model.Game.ColumnExcludeRegion(System.Int32,System.Int32)">
            <summary>
            Identify Cells beyond the intersection of a specified column and region
            </summary>
            <param name="column">Column to be matched</param>
            <param name="region">Region to be excluded</param>
            <returns>Subset of the Game representing the excluded Cells</returns>
        </member>
        <member name="M:Sudoku.Model.Game.RegionExcludeColumn(System.Int32,System.Int32)">
            <summary>
            Identify Cells beyond the intersection of a specified column and region
            </summary>
            <param name="column">Column to be excluded</param>
            <param name="region">Region to be matched</param>
            <returns>Subset of the Game representing the excluded Cells</returns>
        </member>
        <member name="M:Sudoku.Model.Game.SetCell(System.Int32,System.Int32,System.Char)">
            <summary>
            Enter the solution to a specified Cell
            </summary>
            <param name="rowNumber">Row to be matched</param>
            <param name="columnNumber">Column to be matched</param>
            <param name="value">Value to assign to this Cell</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter value is not a legal setting for the Cell</exception>
        </member>
        <member name="M:Sudoku.Model.Game.SetCell(Utility.Move)">
            <summary>
            Enter the solution to a specified Cell
            </summary>
            <param name="move">3D structure to identify potential move in a Sudoku puzzle</param>
        </member>
        <member name="M:Sudoku.Model.Game.ToString">
            <summary>
            Simple text representation of the Game
            </summary>
            <returns>Text in one line</returns>
        </member>
        <member name="P:Sudoku.Model.Game.Cells">
            <summary>
            Game representation in two-dimensional array
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.Rows">
            <summary>
            Game representation in list of lists arranged by row
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.Columns">
            <summary>
            Game representation in list of lists arranged by column
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.Regions">
            <summary>
            Game representation in list of lists arranged by region
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.SideLength">
            <summary>
            Number of rows, columns, and regions in the Game
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.Identifier">
            <summary>
            Optional text designation for this particular Game
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.Difficulty">
            <summary>
            Relative measure of solving complexity as determined by game logic
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.StepCount">
            <summary>
            Relative measure of effort taken to solve
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.IsSolved">
            <summary>
            Whether the puzzle has been successfully solved
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.SolvedCells">
            <summary>
            Number of Cells in the puzzle that have been solved
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.RemainingPossibilities">
            <summary>
            Number of possibilites that have not been disqualified yet
            </summary>
        </member>
        <member name="P:Sudoku.Model.Game.DeepClone">
            <summary>
            Deep copy of this game
            </summary>///
        </member>
        <member name="T:Sudoku.Model.Logic">
            <summary>
            Soduko game-solving logic methods
            </summary>
            <remarks>May want to exclude from Unit testing - no independent way to verify?</remarks>
        </member>
        <member name="M:Sudoku.Model.Logic.Loners(Sudoku.Model.Game)">
            <summary>
            Find all unsolved Cells where all but one possibilities have been disqualified
            </summary>
            <param name="game">Two-dimensional array representing a Sudoku puzzle</param>
            <returns>List of Moves that should be taken during this pass</returns>
        </member>
        <member name="M:Sudoku.Model.Logic.Unique(Sudoku.Model.Game)">
            <summary>
            Find all unsolved Cells where only one Cell in a row/column/region can provide a specific value
            </summary>
            <param name="game">Two-dimensional array representing a Sudoku puzzle</param>
            <returns>List of Moves that should be taken during this pass</returns>
        </member>
        <member name="M:Sudoku.Model.Logic.ElsewhereInGroup(Sudoku.Model.Game)">
            <summary>
            Find all Moves that must be excluded due to requirement in other Cells in same row/column/region
            </summary>
            <remarks>Should be extended beyond pairs - don't know how far
            Example: 12/24/14 trio, 3 MUST be in second row in region since 3 CAN'T be in 
            second row in any other region</remarks>
            <param name="game">Two-dimensional array representing a Sudoku puzzle</param>
            <returns>List of Moves that should be excluded / disqualified during this pass</returns>
        </member>
        <member name="M:Sudoku.Model.Logic.FindExclusionsInGroup(System.Collections.Generic.IEnumerable{Sudoku.Model.Cell})">
            <summary>
            Exclude possibilities due to singles, pairs, trios, quads, quints, ... within same set of Cells
            </summary>
            <param name="candidates">Set of Cells to investigate</param>
            <returns>List of disqualified Moves</returns>
        </member>
        <member name="M:Sudoku.Model.Logic.IntersectingExclusions(Sudoku.Model.Game)">
            <summary>
            Find all Moves that must be excluded due to intersection constraints between regions and rows/columns 
            </summary>
            <param name="game">Two-dimensional array representing a Sudoku puzzle</param>
            <returns>List of Moves that should be excluded / disqualified during this pass</returns>
        </member>
        <member name="M:Sudoku.Model.Logic.SolveRecursively(System.Collections.Generic.List{System.Func{Sudoku.Model.Game,System.Collections.Generic.List{Utility.Move}}},System.Int32,Sudoku.Model.Game)">
            <summary>
            Attempt to use all algorithms in parameter process recursively to solve a Sudoku
            </summary>
            <param name="process">Set of steps in a procedure</param>
            <param name="currentStep">Algorithmic step</param>
            <param name="game">Sudoku game object</param>
        </member>
        <member name="M:Sudoku.Model.Logic.UpdateCellValues(System.Func{Sudoku.Model.Game,System.Collections.Generic.List{Utility.Move}},Sudoku.Model.Game)">
            <summary>
            Attempt a solving step that might identify solved or disqualified Cells
            </summary>
            <param name="nextStep">Algorithmic step</param>
            <param name="game">Sudoku game object</param>
        </member>
        <member name="T:Sudoku.Model.CellStatus">
            <summary>
            Measure of completeness in solving a Cell
            </summary>
        </member>
        <member name="F:Sudoku.Model.CellStatus.Known">
            <summary>
            Value defined originally by puzzle
            </summary>
        </member>
        <member name="F:Sudoku.Model.CellStatus.Unknown">
            <summary>
            Value not yet known
            </summary>
        </member>
        <member name="F:Sudoku.Model.CellStatus.DerivedManually">
            <summary>
            Value believed to be true, declared by player using logic
            </summary>
        </member>
        <member name="F:Sudoku.Model.CellStatus.DerivedSemiAutomatically">
            <summary>
            Value believed to be true, solved by computer, assumes no player errors
            </summary>
        </member>
        <member name="F:Sudoku.Model.CellStatus.Scratchpad">
            <summary>
            Partial solution showing subset of hints declared by player
            </summary>
        </member>
        <member name="T:Sudoku.Model.PuzzleFactory">
            <summary>
            Generate Sudoku puzzles
            </summary>
        </member>
        <member name="M:Sudoku.Model.PuzzleFactory.GetSudoku">
            <summary>
            Instantiate a Sudoku puzzle
            </summary>
            <returns>A Sudoku puzzle</returns>
        </member>
    </members>
</doc>
